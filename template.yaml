AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for CloudWatch Metric Streams to Kinesis Firehose with private HTTP endpoint destination'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID where the VPC endpoints will be created'

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'List of private subnet IDs where VPC endpoints will be created'

  LambdaS3Bucket:
    Type: String
    Description: 'S3 bucket name containing Lambda function code'

  LambdaS3Key:
    Type: String
    Description: 'S3 key for Record Processor Lambda code'
    Default: 'lambda/record_processor.zip'

  HttpEndpointLambdaS3Key:
    Type: String
    Description: 'S3 key for HTTP Endpoint Lambda code'
    Default: 'lambda/http_endpoint.zip'

Resources:
  # Security Groups for VPC Endpoints
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for API Gateway VPC Endpoint
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpce-sg'

  FirehoseEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kinesis Firehose VPC Endpoint
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-firehose-vpce-sg'

  # VPC Endpoints
  ApiGatewayVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - VPCEndpointSecurityGroup
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds: !Ref PrivateSubnetIds
      SecurityGroupIds: 
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  FirehoseVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - FirehoseEndpointSecurityGroup
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.kinesis-firehose'
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds: !Ref PrivateSubnetIds
      SecurityGroupIds: 
        - !Ref FirehoseEndpointSecurityGroup
      PrivateDnsEnabled: true

  # S3 Bucket for Firehose backup
  FirehoseBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FirehoseBackupBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: FirehoseBackupBucket
    Properties:
      Bucket: !Ref FirehoseBackupBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !GetAtt FirehoseBackupBucket.Arn
              - !Sub '${FirehoseBackupBucket.Arn}/*'

  # Lambda Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Function for Record Processing
  RecordProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Handler: record_processor.lambda_handler
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn

  # Lambda Function for HTTP Endpoint
  HttpEndpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref HttpEndpointLambdaS3Key
      Handler: http_endpoint.lambda_handler
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn

  # API Gateway
  MetricsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-metrics-api'
      Description: Private API for receiving CloudWatch metrics
      EndpointConfiguration:
        Types: 
          - PRIVATE
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'
            Condition:
              StringEquals:
                aws:SourceVpc: !Ref VpcId

  MetricsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MetricsApi
      ParentId: !GetAtt MetricsApi.RootResourceId
      PathPart: metrics

  MetricsMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: HttpEndpointFunction
    Properties:
      RestApiId: !Ref MetricsApi
      ResourceId: !Ref MetricsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpEndpointFunction.Arn}/invocations'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MetricsMethod
    Properties:
      RestApiId: !Ref MetricsApi

  ApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiDeployment
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref MetricsApi
      StageName: prod

  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - MetricsApi
      - HttpEndpointFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HttpEndpointFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MetricsApi}/*'

  # Firehose Role
  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FirehosePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*'
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !GetAtt FirehoseBackupBucket.Arn
                  - !Sub '${FirehoseBackupBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: !GetAtt RecordProcessorFunction.Arn

  # Kinesis Firehose Delivery Stream
  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - FirehoseRole
      - FirehoseBackupBucket
      - FirehoseBackupBucketPolicy
      - ApiStage
      - FirehoseVPCEndpoint
      - RecordProcessorFunction
    Properties:
      DeliveryStreamType: DirectPut
      HttpEndpointDestinationConfiguration:
        EndpointConfiguration:
          Url: !Sub 'https://${MetricsApi}.execute-api.${AWS::Region}.amazonaws.com/prod/metrics'
          AccessKey: none
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        RoleARN: !GetAtt FirehoseRole.Arn
        RetryOptions:
          DurationInSeconds: 300
        RequestConfiguration:
          ContentEncoding: NONE
          CommonAttributes: []
        S3BackupMode: FailedDataOnly
        S3Configuration:
          BucketARN: !GetAtt FirehoseBackupBucket.Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          CompressionFormat: UNCOMPRESSED
          RoleARN: !GetAtt FirehoseRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt RecordProcessorFunction.Arn

  # Metric Stream Role
  MetricStreamRole:
    Type: AWS::IAM::Role
    DependsOn: DeliveryStream
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: streams.metrics.cloudwatch.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MetricStreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: !GetAtt DeliveryStream.Arn

  # CloudWatch Metric Stream
  MetricStream:
    Type: AWS::CloudWatch::MetricStream
    DependsOn:
      - MetricStreamRole
      - DeliveryStream
    Properties:
      Name: !Sub '${AWS::StackName}-metric-stream'
      OutputFormat: json
      FirehoseArn: !GetAtt DeliveryStream.Arn
      RoleArn: !GetAtt MetricStreamRole.Arn
      IncludeFilters:
        - Namespace: AWS/EC2
        - Namespace: AWS/Lambda
        - Namespace: AWS/RDS

Outputs:
  MetricStreamArn:
    Description: ARN of the CloudWatch Metric Stream
    Value: !GetAtt MetricStream.Arn
  
  FirehoseArn:
    Description: ARN of the Kinesis Firehose Delivery Stream
    Value: !GetAtt DeliveryStream.Arn

  FirehoseBackupBucketName:
    Description: Name of the S3 bucket for Firehose backup
    Value: !Ref FirehoseBackupBucket

  ApiEndpoint:
    Description: URL of the private API Gateway endpoint (only accessible within VPC)
    Value: !Sub 'https://${MetricsApi}.execute-api.${AWS::Region}.amazonaws.com/prod/metrics'

  VpcEndpointId:
    Description: ID of the VPC Endpoint for API Gateway
    Value: !Ref ApiGatewayVPCEndpoint
